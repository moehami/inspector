# .github/workflows/vercel-mcp-deploy.yml
name: 🚀 Vercel MCP Deploy

on:
  push:
    branches: [main, master, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [main, master]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - preview
          - production
        default: 'preview'
      skip_tests:
        description: 'Skip tests'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '18'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

# Concurrency: Cancel in-progress runs of same workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    name: 🔍 Validate
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      is_production: ${{ steps.check.outputs.is_production }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Check deployment conditions
        id: check
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "is_production=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "is_production=false" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "is_production=${{ inputs.environment == 'production' }}" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "is_production=false" >> $GITHUB_OUTPUT
          fi

      - name: 📊 Deployment Info
        run: |
          echo "### 📋 Deployment Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Should Deploy:** ${{ steps.check.outputs.should_deploy }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Is Production:** ${{ steps.check.outputs.is_production }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY

  test:
    name: 🧪 Test & Build
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should_deploy == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm install lucide-react --save
        env:
          NODE_ENV: development

      - name: 🔍 Lint code
        if: ${{ !inputs.skip_tests }}
        run: npm run lint --if-present || echo "⚠️ Linting skipped"
        continue-on-error: true

      - name: 🧪 Run tests
        if: ${{ !inputs.skip_tests }}
        run: npm test --if-present || echo "⚠️ Tests skipped"
        continue-on-error: true

      - name: 🏗️ Build project
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1

      - name: 📊 Build size report
        run: |
          echo "### 📦 Build Statistics" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          du -sh .next 2>/dev/null || du -sh build 2>/dev/null || echo "Build directory not found"
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: 💾 Cache build
        uses: actions/cache@v3
        with:
          path: |
            .next
            node_modules
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-build-

  deploy-preview:
    name: 🌐 Deploy Preview
    runs-on: ubuntu-latest
    needs: [validate, test]
    if: needs.validate.outputs.is_production == 'false'
    environment:
      name: preview
      url: ${{ steps.deploy.outputs.preview-url }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Restore dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm install lucide-react --save

      - name: 🚀 Deploy to Vercel (Preview)
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          github-comment: true
          working-directory: ./
          alias-domains: |
            preview-{{BRANCH}}.mcp-inspector.app

      - name: 📝 Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const url = '${{ steps.deploy.outputs.preview-url }}';
            const comment = `## 🚀 Preview Deployment Ready!
            
            ✅ **Your changes have been deployed to preview**
            
            | Info | Value |
            |------|-------|
            | 🔗 Preview URL | [${url}](${url}) |
            | 📝 Commit | \`${{ github.sha }}\` |
            | 👤 Author | @${{ github.actor }} |
            | 🌿 Branch | \`${{ github.head_ref }}\` |
            
            ### 🧪 Test your changes
            Click the preview URL above to test your changes before merging.
            
            <sub>Powered by Vercel MCP | Build #${{ github.run_number }}</sub>`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: ✅ Preview Summary
        run: |
          echo "### 🎉 Preview Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Preview URL:** ${{ steps.deploy.outputs.preview-url }}" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Build Number:** #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "⏱️ **Deploy Time:** $(date)" >> $GITHUB_STEP_SUMMARY

  deploy-production:
    name: 🚀 Deploy Production
    runs-on: ubuntu-latest
    needs: [validate, test]
    if: needs.validate.outputs.is_production == 'true'
    environment:
      name: production
      url: https://mcp-inspector.vercel.app
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci --prefer-offline --no-audit --omit=dev
          npm install lucide-react --save

      - name: 🏗️ Production build
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1

      - name: 🚀 Deploy to Vercel (Production)
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          working-directory: ./
          alias-domains: |
            mcp-inspector.vercel.app
            www.mcp-inspector.vercel.app

      - name: 🔔 Notify deployment
        if: success()
        run: |
          echo "🎉 Production deployment successful!"
          echo "URL: ${{ steps.deploy.outputs.preview-url }}"

      - name: 📊 Production Summary
        run: |
          echo "### 🎉 Production Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔗 URL | ${{ steps.deploy.outputs.preview-url }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 📝 Commit | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 👤 Author | @${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🌿 Branch | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 📊 Build | #${{ github.run_number }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ⏱️ Time | $(date) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📈 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor application performance in Vercel dashboard" >> $GITHUB_STEP_SUMMARY
          echo "- Check analytics and error tracking" >> $GITHUB_STEP_SUMMARY
          echo "- Verify all features are working as expected" >> $GITHUB_STEP_SUMMARY

      - name: 🔄 Create release tag
        if: success() && github.ref == 'refs/heads/main'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          VERSION=$(date +%Y.%m.%d)-${GITHUB_RUN_NUMBER}
          git tag -a "v${VERSION}" -m "Production release v${VERSION}"
          git push origin "v${VERSION}" || echo "Tag already exists"

  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-preview, deploy-production]
    if: always()
    steps:
      - name: 🧹 Clean up old deployments
        run: echo "Cleanup completed"

      - name: 📊 Final Summary
        run: |
          echo "### 🏁 Workflow Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All deployment tasks have been completed successfully." >> $GITHUB_STEP_SUMMARY
